{
  "contractName": "NFTokenMetadata",
  "abi": [
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.12+commit.7709ece9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Optional metadata implementation for ERC-721 non-fungible token standard.\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\",\"_tokenId\":\"ID of the token to be approved.\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.\",\"params\":{\"_owner\":\"Address for whom to query the balance.\"},\"return\":\"Balance of _owner.\"},\"constructor\":{\"details\":\"Contract constructor.\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\"},\"return\":\"Address that _tokenId is approved for. \"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\",\"_owner\":\"The address that owns the NFTs.\"},\"return\":\"True if approved for all, false otherwise.\"},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\",\"return\":\"Representing name. \"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\"},\"return\":\"Address of _tokenId owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\",\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\",\"_operator\":\"Address to add to the set of authorized operators.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\",\"params\":{\"_interfaceID\":\"Id of the interface.\"},\"return\":\"True if _interfaceID is supported, false otherwise.\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\",\"return\":\"Representing symbol. \"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\",\"params\":{\"_from\":\"The current owner of the NFT.\",\"_to\":\"The new owner.\",\"_tokenId\":\"The NFT to transfer.\"}}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner.\"},\"constructor\":\"When implementing this contract don't forget to set nftName and nftSymbol.\",\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this function just sets data to \\\"\\\"\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost.\"}}}},\"settings\":{\"compilationTarget\":{\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token-metadata.sol\":\"NFTokenMetadata\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/math/safe-math.sol\":{\"keccak256\":\"0x6e25fc543dfb61b79952c2dca59161531cf2608be6932a7ba9f9865b789276d1\",\"urls\":[\"bzz-raw://b5e8f2995a2a6777dcf62789e2b5d4972382cc0ab5385505db36fb86a3dc9452\",\"dweb:/ipfs/QmP3Z6kpp5m3xxjVAM87pAvSQMc3ydodn98UxLbn4ndSvL\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/erc721-metadata.sol\":{\"keccak256\":\"0xcc2fb81bc5918bd66a40d63baa304c2ea66ce1e9c01c22daacad1be907b00426\",\"urls\":[\"bzz-raw://1c763c21ef3e3317b28bb1510630d6dcebf67f338cc95b21ba06f37e78f5d006\",\"dweb:/ipfs/QmbBzG7JArLUkfKQDWaxAJ3dLbidTXRzixcQiWtYpEFcE3\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/erc721-token-receiver.sol\":{\"keccak256\":\"0x751cacfa5a8aa7558e6938147c85c12adc5dc37640babd188b56e39037c48805\",\"urls\":[\"bzz-raw://bcd64c43f8a8b9d65cd10805eb8209b48e128e2670b7b5fa5c5ada0bdd1f5aa5\",\"dweb:/ipfs/QmZksjfftRRYyfmt7YH8ZQK8BWtMoKauDJXLQkyq77aJhj\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/erc721.sol\":{\"keccak256\":\"0x362fbcfa42a6afb16559c4e1ac5cf2f8bb93f0fe3e65d6845ee10f34e5b2326b\",\"urls\":[\"bzz-raw://3374b53d2420d1a1f9c84ee52232155c05e5f96902a780b832b0970de3bd3e05\",\"dweb:/ipfs/QmR7V4h4ALxPbTpWa3hqAAvhUgfJYVLjRq7RD6GW5EQ1Wr\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token-metadata.sol\":{\"keccak256\":\"0x14b2454a06d2545773d7340bd60ffec58c4b419b8f93473749c6e188b1ca5116\",\"urls\":[\"bzz-raw://851c80ddfcdd9767d3eff41b305920687ad1c1d8dfe221c1f37ef2112c37c774\",\"dweb:/ipfs/QmarzDks9Gocnbgrz9BczLg8Vnxkm4s9MaUV8q4GFaZ7Hv\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token.sol\":{\"keccak256\":\"0xddb5b84bca417c0cb127ed7957d01bf4a6b193cacfc0229b888f0b389b350ce1\",\"urls\":[\"bzz-raw://cb56734d284867f0bdfe273897db2180bc3357ba07935cdf60af4c063a668f07\",\"dweb:/ipfs/QmTt3K32MvsQ3T5kcYnoz7AcgAnMTAFGtq99SKNYQN7bMK\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/utils/address-utils.sol\":{\"keccak256\":\"0x2a96e272b4037efc4938217c49e1b3f4031d643ad4c792caf29263da7e43c35b\",\"urls\":[\"bzz-raw://ad8090d99e04b9dda2c491e8492b77d38ec3423932944eafe54caaf6770627ec\",\"dweb:/ipfs/QmQdgu3erj6XzgRUc2jVo4gMHGc3BHtUqUEyTVDuTYmWMT\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/utils/erc165.sol\":{\"keccak256\":\"0xdc31d961580b0b83af7ebc9ed47342a7154c6951ac7440174712eefb9f533692\",\"urls\":[\"bzz-raw://69f7260de358ef24716460191107e549b2103e4e2ec30f9cf0f7d9c0d56fe5f2\",\"dweb:/ipfs/QmZtsbta9rwEVRdzDSsJghiafcVNnJCZ2iZN7rfTuxsxG3\"]},\"/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/utils/supports-interface.sol\":{\"keccak256\":\"0x1c2f3445a057fc483714dbc6dafba90347cef6ad25135ef47737cccf462b06d9\",\"urls\":[\"bzz-raw://c022fee2f8edc73bb49fbc295129491acd4dbdd3117046e81ae36b0b2bfe59be\",\"dweb:/ipfs/QmbdjNnUWsXfbr8drrsk31pdEUxiYyaanYB5MJFQeVvjgj\"]}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "sourceMap": "174:2416:14:-;;;656:94;8:9:-1;5:2;;;30:1;27;20:12;5:2;656:94:14;457:4:18;423:19;:31;443:10;423:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;3990:4:15;3956:19;:31;3976:10;3956:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;723:4:14;689:19;:31;709:10;689:31;;;;;;;;;;;;;;;;;:38;;;;;;;;;;;;;;;;;;174:2416;;;;;;",
  "deployedSourceMap": "174:2416:14:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;174:2416:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;679:150:18;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;679:150:18;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;866:100:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;866:100:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8951:160:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8951:160:15;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;6913:315;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6913:315:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;6177:324;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6177:324:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;5454:157;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5454:157:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8544:170;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8544:170:15;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8126:167;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8126:167:15;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10612:240;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10612:240:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1069:108:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1069:108:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7630:210:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7630:210:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;4869:186;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;4869:186:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;4869:186:15;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;4869:186:15;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;4869:186:15;;;;;;;;;;;;:::i;:::-;;1323:158:14;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1323:158:14;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1323:158:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9372:169:15;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9372:169:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;679:150:18;770:4;791:19;:33;811:12;791:33;;;;;;;;;;;;;;;;;;;;;;;;;;;784:40;;679:150;;;:::o;866:100:14:-;917:19;954:7;946:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;866:100;:::o;8951:160:15:-;9060:7;9037:8;3843:1;3812:33;;:9;:19;3822:8;3812:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3804:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9084:12;:22;9097:8;9084:22;;;;;;;;;;;;;;;;;;;;;9077:29;;8951:160;;;;:::o;6913:315::-;7007:8;3053:18;3074:9;:19;3084:8;3074:19;;;;;;;;;;;;;;;;;;;;;3053:40;;3121:10;3107:24;;:10;:24;;;:68;;;;3135:16;:28;3152:10;3135:28;;;;;;;;;;;;;;;:40;3164:10;3135:40;;;;;;;;;;;;;;;;;;;;;;;;;3107:68;3099:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7034:8;3843:1;3812:33;;:9;:19;3822:8;3812:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3804:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7052:18;7073:9;:19;7083:8;7073:19;;;;;;;;;;;;;;;;;;;;;7052:40;;7119:10;7106:23;;:9;:23;;;;7098:32;;;;;;7162:9;7137:12;:22;7150:8;7137:22;;;;;;;;;;;;:34;;;;;;;;;;;;;;;;;;7214:8;7203:9;7182:41;;7191:10;7182:41;;;;;;;;;;;;3869:1;3209;6913:315;;;;:::o;6177:324::-;6290:8;3404:18;3425:9;:19;3435:8;3425:19;;;;;;;;;;;;;;;;;;;;;3404:40;;3479:10;3465:24;;:10;:24;;;:70;;;;3525:10;3499:36;;:12;:22;3512:8;3499:22;;;;;;;;;;;;;;;;;;;;;:36;;;3465:70;:120;;;;3545:16;:28;3562:10;3545:28;;;;;;;;;;;;;;;:40;3574:10;3545:40;;;;;;;;;;;;;;;;;;;;;;;;;3465:120;3450:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6317:8;3843:1;3812:33;;:9;:19;3822:8;3812:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3804:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6335:18;6356:9;:19;6366:8;6356:19;;;;;;;;;;;;;;;;;;;;;6335:40;;6403:5;6389:19;;:10;:19;;;6381:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6457:1;6442:17;;:3;:17;;;;6434:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6472:24;6482:3;6487:8;6472:9;:24::i;:::-;3869:1;3625;6177:324;;;;;:::o;5454:157::-;5563:43;5581:5;5588:3;5593:8;5563:43;;;;;;;;;;;;:17;:43::i;:::-;5454:157;;;:::o;8544:170::-;8622:14;8655:9;:19;8665:8;8655:19;;;;;;;;;;;;;;;;;;;;;8646:28;;8706:1;8688:20;;:6;:20;;;;8680:29;;;;;;8544:170;;;:::o;8126:167::-;8204:7;8247:1;8229:20;;:6;:20;;;;8221:29;;;;;;8263:25;8281:6;8263:17;:25::i;:::-;8256:32;;8126:167;;;:::o;10612:240::-;10716:1;10701:17;;:3;:17;;;;10693:26;;;;;;10764:1;10733:33;;:9;:19;10743:8;10733:19;;;;;;;;;;;;;;;;;;;;;:33;;;10725:42;;;;;;10774:26;10786:3;10791:8;10774:11;:26::i;:::-;10838:8;10833:3;10812:35;;10829:1;10812:35;;;;;;;;;;;;10612:240;;:::o;1069:108:14:-;1122:21;1163:9;1153:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1069:108;:::o;7630:210:15:-;7767:9;7725:16;:28;7742:10;7725:28;;;;;;;;;;;;;;;:39;7754:9;7725:39;;;;;;;;;;;;;;;;:51;;;;;;;;;;;;;;;;;;7814:9;7787:48;;7802:10;7787:48;;;7825:9;7787:48;;;;;;;;;;;;;;;;;;;;;;7630:210;;:::o;4869:186::-;5004:46;5022:5;5029:3;5034:8;5044:5;;5004:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;5004:46:15;;;;;;:17;:46::i;:::-;4869:186;;;;;:::o;1323:158:14:-;1429:13;1406:8;3843:1:15;3812:33;;:9;:19;3822:8;3812:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3804:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1459:7:14;:17;1467:8;1459:17;;;;;;;;;;;1452:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1323:158;;;;:::o;9372:169:15:-;9480:4;9501:16;:24;9518:6;9501:24;;;;;;;;;;;;;;;:35;9526:9;9501:35;;;;;;;;;;;;;;;;;;;;;;;;;9494:42;;9372:169;;;;:::o;9724:262::-;9807:12;9822:9;:19;9832:8;9822:19;;;;;;;;;;;;;;;;;;;;;9807:34;;9847:24;9862:8;9847:14;:24::i;:::-;9878:30;9893:4;9899:8;9878:14;:30::i;:::-;9914:26;9926:3;9931:8;9914:11;:26::i;:::-;9972:8;9967:3;9952:29;;9961:4;9952:29;;;;;;;;;;;;9724:262;;;:::o;13190:558::-;13331:8;3404:18;3425:9;:19;3435:8;3425:19;;;;;;;;;;;;;;;;;;;;;3404:40;;3479:10;3465:24;;:10;:24;;;:70;;;;3525:10;3499:36;;:12;:22;3512:8;3499:22;;;;;;;;;;;;;;;;;;;;;:36;;;3465:70;:120;;;;3545:16;:28;3562:10;3545:28;;;;;;;;;;;;;;;:40;3574:10;3545:40;;;;;;;;;;;;;;;;;;;;;;;;;3465:120;3450:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13358:8;3843:1;3812:33;;:9;:19;3822:8;3812:19;;;;;;;;;;;;;;;;;;;;;:33;;;;3804:59;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13376:18;13397:9;:19;13407:8;13397:19;;;;;;;;;;;;;;;;;;;;;13376:40;;13444:5;13430:19;;:10;:19;;;13422:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13504:1;13489:17;;:3;:17;;;;13481:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13519:24;13529:3;13534:8;13519:9;:24::i;:::-;13554:16;:3;:14;;;:16::i;:::-;13550:194;;;13585:13;13621:3;13601:41;;;13643:10;13655:5;13662:8;13672:5;13601:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13601:77:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13601:77:15;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;13601:77:15;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13601:77:15;;;;;;;;;;;;;;;;13585:93;;602:10;13704:24;;13694:34;;;:6;:34;;;;13686:51;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13550:194;;3869:1;3625;13190:558;;;;;;:::o;12779:142::-;12865:7;12889:19;:27;12909:6;12889:27;;;;;;;;;;;;;;;;12882:34;;12779:142;;;:::o;12263:228::-;12387:1;12356:33;;:9;:19;12366:8;12356:19;;;;;;;;;;;;;;;;;;;;;:33;;;12348:42;;;;;;12419:3;12397:9;:19;12407:8;12397:19;;;;;;;;;;;;:25;;;;;;;;;;;;;;;;;;12455:31;12484:1;12455:19;:24;12475:3;12455:24;;;;;;;;;;;;;;;;:28;;:31;;;;:::i;:::-;12428:19;:24;12448:3;12428:24;;;;;;;;;;;;;;;:58;;;;12263:228;;:::o;13876:164::-;13984:1;13950:36;;:12;:22;13963:8;13950:22;;;;;;;;;;;;;;;;;;;;;:36;;;13946:90;;14007:12;:22;14020:8;14007:22;;;;;;;;;;;;14000:29;;;;;;;;;;;13946:90;13876:164;:::o;11775:229::-;11896:5;11873:28;;:9;:19;11883:8;11873:19;;;;;;;;;;;;;;;;;;;;;:28;;;11865:37;;;;;;11966:1;11937:19;:26;11957:5;11937:26;;;;;;;;;;;;;;;;:30;11908:19;:26;11928:5;11908:26;;;;;;;;;;;;;;;:59;;;;11980:9;:19;11990:8;11980:19;;;;;;;;;;;;11973:26;;;;;;;;;;;11775:229;;:::o;424:762:16:-;502:17;934:16;956:19;978:66;956:88;;;;1085:5;1073:18;1061:30;;1150:3;1138:15;;:8;:15;;:42;;;;;1169:11;1157:8;:23;;1138:42;1122:59;;424:762;;;;;:::o;2071:177:3:-;2167:11;2205:8;2194;:19;2188:25;;2234:8;2227:3;:15;;2219:24;;;;;;2071:177;;;;:::o",
  "source": "pragma solidity ^0.5.12;\n\nimport \"./nf-token.sol\";\nimport \"./erc721-metadata.sol\";\n\n/**\n * @dev Optional metadata implementation for ERC-721 non-fungible token standard.\n */\ncontract NFTokenMetadata is\n  NFToken,\n  ERC721Metadata\n{\n\n  /**\n   * @dev A descriptive name for a collection of NFTs.\n   */\n  string internal nftName;\n\n  /**\n   * @dev An abbreviated name for NFTokens.\n   */\n  string internal nftSymbol;\n\n  /**\n   * @dev Mapping from NFT ID to metadata uri.\n   */\n  mapping (uint256 => string) internal idToUri;\n\n  /**\n   * @dev Contract constructor.\n   * @notice When implementing this contract don't forget to set nftName and nftSymbol.\n   */\n  constructor()\n    public\n  {\n    supportedInterfaces[0x5b5e139f] = true; // ERC721Metadata\n  }\n\n  /**\n   * @dev Returns a descriptive name for a collection of NFTokens.\n   * @return Representing name. \n   */\n  function name()\n    external\n    view\n    returns (string memory _name)\n  {\n    _name = nftName;\n  }\n\n  /**\n   * @dev Returns an abbreviated name for NFTokens.\n   * @return Representing symbol. \n   */\n  function symbol()\n    external\n    view\n    returns (string memory _symbol)\n  {\n    _symbol = nftSymbol;\n  }\n\n  /**\n   * @dev A distinct URI (RFC 3986) for a given NFT.\n   * @param _tokenId Id for which we want uri.\n   * @return URI of _tokenId.\n   */\n  function tokenURI(\n    uint256 _tokenId\n  )\n    external\n    view\n    validNFToken(_tokenId)\n    returns (string memory)\n  {\n    return idToUri[_tokenId];\n  }\n\n  /**\n   * @dev Burns a NFT.\n   * @notice This is an internal function which should be called from user-implemented external\n   * burn function. Its purpose is to show and properly initialize data structures when using this\n   * implementation. Also, note that this burn implementation allows the minter to re-mint a burned\n   * NFT.\n   * @param _tokenId ID of the NFT to be burned.\n   */\n  function _burn(\n    uint256 _tokenId\n  )\n    internal\n  {\n    super._burn(_tokenId);\n\n    if (bytes(idToUri[_tokenId]).length != 0)\n    {\n      delete idToUri[_tokenId];\n    }\n  }\n\n  /**\n   * @dev Set a distinct URI (RFC 3986) for a given NFT ID.\n   * @notice This is an internal function which should be called from user-implemented external\n   * function. Its purpose is to show and properly initialize data structures when using this\n   * implementation.\n   * @param _tokenId Id for which we want uri.\n   * @param _uri String representing RFC 3986 URI.\n   */\n  function _setTokenUri(\n    uint256 _tokenId,\n    string memory _uri\n  )\n    internal\n    validNFToken(_tokenId)\n  {\n    idToUri[_tokenId] = _uri;\n  }\n\n}\n",
  "sourcePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token-metadata.sol",
  "ast": {
    "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token-metadata.sol",
    "exportedSymbols": {
      "NFTokenMetadata": [
        1672
      ]
    },
    "id": 1673,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1568,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:14"
      },
      {
        "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token.sol",
        "file": "./nf-token.sol",
        "id": 1569,
        "nodeType": "ImportDirective",
        "scope": 1673,
        "sourceUnit": 2350,
        "src": "26:24:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/erc721-metadata.sol",
        "file": "./erc721-metadata.sol",
        "id": 1570,
        "nodeType": "ImportDirective",
        "scope": 1673,
        "sourceUnit": 1156,
        "src": "51:31:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1571,
              "name": "NFToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2349,
              "src": "204:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFToken_$2349",
                "typeString": "contract NFToken"
              }
            },
            "id": 1572,
            "nodeType": "InheritanceSpecifier",
            "src": "204:7:14"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1573,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1155,
              "src": "215:14:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$1155",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 1574,
            "nodeType": "InheritanceSpecifier",
            "src": "215:14:14"
          }
        ],
        "contractDependencies": [
          1155,
          1271,
          2349,
          2389,
          2421
        ],
        "contractKind": "contract",
        "documentation": "@dev Optional metadata implementation for ERC-721 non-fungible token standard.",
        "fullyImplemented": true,
        "id": 1672,
        "linearizedBaseContracts": [
          1672,
          1155,
          2349,
          2421,
          2389,
          1271
        ],
        "name": "NFTokenMetadata",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1576,
            "name": "nftName",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "302:23:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1575,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "302:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1578,
            "name": "nftSymbol",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "386:25:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1577,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "386:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1582,
            "name": "idToUri",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "475:44:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 1581,
              "keyType": {
                "id": 1579,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "484:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "475:27:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 1580,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "495:6:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1591,
              "nodeType": "Block",
              "src": "683:67:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1585,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2398,
                        "src": "689:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 1587,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783562356531333966",
                        "id": 1586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "709:10:14",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1532892063_by_1",
                          "typeString": "int_const 1532892063"
                        },
                        "value": "0x5b5e139f"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "689:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1588,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "723:4:14",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "689:38:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1590,
                  "nodeType": "ExpressionStatement",
                  "src": "689:38:14"
                }
              ]
            },
            "documentation": "@dev Contract constructor.\n@notice When implementing this contract don't forget to set nftName and nftSymbol.",
            "id": 1592,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1583,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "667:2:14"
            },
            "returnParameters": {
              "id": 1584,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "683:0:14"
            },
            "scope": 1672,
            "src": "656:94:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1601,
              "nodeType": "Block",
              "src": "940:26:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1597,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1595,
                      "src": "946:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1598,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1576,
                      "src": "954:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "946:15:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1600,
                  "nodeType": "ExpressionStatement",
                  "src": "946:15:14"
                }
              ]
            },
            "documentation": "@dev Returns a descriptive name for a collection of NFTokens.\n@return Representing name. ",
            "id": 1602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1593,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "879:2:14"
            },
            "returnParameters": {
              "id": 1596,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "917:19:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "917:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "916:21:14"
            },
            "scope": 1672,
            "src": "866:100:14",
            "stateMutability": "view",
            "superFunction": 1142,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1611,
              "nodeType": "Block",
              "src": "1147:30:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1607,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1605,
                      "src": "1153:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1608,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1578,
                      "src": "1163:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1153:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1610,
                  "nodeType": "ExpressionStatement",
                  "src": "1153:19:14"
                }
              ]
            },
            "documentation": "@dev Returns an abbreviated name for NFTokens.\n@return Representing symbol. ",
            "id": 1612,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1084:2:14"
            },
            "returnParameters": {
              "id": 1606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1605,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1612,
                  "src": "1122:21:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1604,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1122:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1121:23:14"
            },
            "scope": 1672,
            "src": "1069:108:14",
            "stateMutability": "view",
            "superFunction": 1147,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1626,
              "nodeType": "Block",
              "src": "1446:35:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1622,
                      "name": "idToUri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1582,
                      "src": "1459:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 1624,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1623,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1614,
                      "src": "1467:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1459:17:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1621,
                  "id": 1625,
                  "nodeType": "Return",
                  "src": "1452:24:14"
                }
              ]
            },
            "documentation": "@dev A distinct URI (RFC 3986) for a given NFT.\n@param _tokenId Id for which we want uri.\n@return URI of _tokenId.",
            "id": 1627,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1617,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1614,
                    "src": "1406:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1618,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1616,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1812,
                  "src": "1393:12:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1393:22:14"
              }
            ],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1614,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1627,
                  "src": "1346:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1346:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1340:26:14"
            },
            "returnParameters": {
              "id": 1621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1620,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1627,
                  "src": "1429:13:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1429:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1428:15:14"
            },
            "scope": 1672,
            "src": "1323:158:14",
            "stateMutability": "view",
            "superFunction": 1154,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1653,
              "nodeType": "Block",
              "src": "1930:123:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1635,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1629,
                        "src": "1948:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1632,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2645,
                        "src": "1936:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadata_$1672",
                          "typeString": "contract super NFTokenMetadata"
                        }
                      },
                      "id": 1634,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2180,
                      "src": "1936:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1936:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "1936:21:14"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1639,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1582,
                              "src": "1974:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1641,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1640,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "1982:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1974:17:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 1638,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1968:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": "bytes"
                        },
                        "id": 1642,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1968:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      "id": 1643,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1968:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1644,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2003:1:14",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1968:36:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1652,
                  "nodeType": "IfStatement",
                  "src": "1964:85:14",
                  "trueBody": {
                    "id": 1651,
                    "nodeType": "Block",
                    "src": "2010:39:14",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2018:24:14",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1646,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1582,
                              "src": "2025:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1648,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1647,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "2033:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2025:17:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1650,
                        "nodeType": "ExpressionStatement",
                        "src": "2018:24:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev Burns a NFT.\n@notice This is an internal function which should be called from user-implemented external\nburn function. Its purpose is to show and properly initialize data structures when using this\nimplementation. Also, note that this burn implementation allows the minter to re-mint a burned\nNFT.\n@param _tokenId ID of the NFT to be burned.",
            "id": 1654,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1630,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1629,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "1894:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1628,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1894:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1888:26:14"
            },
            "returnParameters": {
              "id": 1631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1930:0:14"
            },
            "scope": 1672,
            "src": "1874:179:14",
            "stateMutability": "nonpayable",
            "superFunction": 2180,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1670,
              "nodeType": "Block",
              "src": "2552:35:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1664,
                        "name": "idToUri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1582,
                        "src": "2558:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 1666,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1665,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1656,
                        "src": "2566:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2558:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1667,
                      "name": "_uri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1658,
                      "src": "2578:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2558:24:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1669,
                  "nodeType": "ExpressionStatement",
                  "src": "2558:24:14"
                }
              ]
            },
            "documentation": "@dev Set a distinct URI (RFC 3986) for a given NFT ID.\n@notice This is an internal function which should be called from user-implemented external\nfunction. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId Id for which we want uri.\n@param _uri String representing RFC 3986 URI.",
            "id": 1671,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1661,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1656,
                    "src": "2540:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1662,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1660,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1812,
                  "src": "2527:12:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2527:22:14"
              }
            ],
            "name": "_setTokenUri",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1656,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1671,
                  "src": "2465:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1655,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2465:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1658,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 1671,
                  "src": "2487:18:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1657,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2487:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2459:50:14"
            },
            "returnParameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2552:0:14"
            },
            "scope": 1672,
            "src": "2438:149:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1673,
        "src": "174:2416:14"
      }
    ],
    "src": "0:2591:14"
  },
  "legacyAST": {
    "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token-metadata.sol",
    "exportedSymbols": {
      "NFTokenMetadata": [
        1672
      ]
    },
    "id": 1673,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1568,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".12"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:14"
      },
      {
        "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/nf-token.sol",
        "file": "./nf-token.sol",
        "id": 1569,
        "nodeType": "ImportDirective",
        "scope": 1673,
        "sourceUnit": 2350,
        "src": "26:24:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/elliotfriedman/Desktop/721escrow/contracts/src/contracts/tokens/erc721-metadata.sol",
        "file": "./erc721-metadata.sol",
        "id": 1570,
        "nodeType": "ImportDirective",
        "scope": 1673,
        "sourceUnit": 1156,
        "src": "51:31:14",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1571,
              "name": "NFToken",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 2349,
              "src": "204:7:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_NFToken_$2349",
                "typeString": "contract NFToken"
              }
            },
            "id": 1572,
            "nodeType": "InheritanceSpecifier",
            "src": "204:7:14"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1573,
              "name": "ERC721Metadata",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1155,
              "src": "215:14:14",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC721Metadata_$1155",
                "typeString": "contract ERC721Metadata"
              }
            },
            "id": 1574,
            "nodeType": "InheritanceSpecifier",
            "src": "215:14:14"
          }
        ],
        "contractDependencies": [
          1155,
          1271,
          2349,
          2389,
          2421
        ],
        "contractKind": "contract",
        "documentation": "@dev Optional metadata implementation for ERC-721 non-fungible token standard.",
        "fullyImplemented": true,
        "id": 1672,
        "linearizedBaseContracts": [
          1672,
          1155,
          2349,
          2421,
          2389,
          1271
        ],
        "name": "NFTokenMetadata",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 1576,
            "name": "nftName",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "302:23:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1575,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "302:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1578,
            "name": "nftSymbol",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "386:25:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 1577,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "386:6:14",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 1582,
            "name": "idToUri",
            "nodeType": "VariableDeclaration",
            "scope": 1672,
            "src": "475:44:14",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
              "typeString": "mapping(uint256 => string)"
            },
            "typeName": {
              "id": 1581,
              "keyType": {
                "id": 1579,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "484:7:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "475:27:14",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                "typeString": "mapping(uint256 => string)"
              },
              "valueType": {
                "id": 1580,
                "name": "string",
                "nodeType": "ElementaryTypeName",
                "src": "495:6:14",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                }
              }
            },
            "value": null,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1591,
              "nodeType": "Block",
              "src": "683:67:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1589,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1585,
                        "name": "supportedInterfaces",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2398,
                        "src": "689:19:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes4_$_t_bool_$",
                          "typeString": "mapping(bytes4 => bool)"
                        }
                      },
                      "id": 1587,
                      "indexExpression": {
                        "argumentTypes": null,
                        "hexValue": "30783562356531333966",
                        "id": 1586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "709:10:14",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_1532892063_by_1",
                          "typeString": "int_const 1532892063"
                        },
                        "value": "0x5b5e139f"
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "689:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "74727565",
                      "id": 1588,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "723:4:14",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "689:38:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1590,
                  "nodeType": "ExpressionStatement",
                  "src": "689:38:14"
                }
              ]
            },
            "documentation": "@dev Contract constructor.\n@notice When implementing this contract don't forget to set nftName and nftSymbol.",
            "id": 1592,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1583,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "667:2:14"
            },
            "returnParameters": {
              "id": 1584,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "683:0:14"
            },
            "scope": 1672,
            "src": "656:94:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1601,
              "nodeType": "Block",
              "src": "940:26:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1597,
                      "name": "_name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1595,
                      "src": "946:5:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1598,
                      "name": "nftName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1576,
                      "src": "954:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "946:15:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1600,
                  "nodeType": "ExpressionStatement",
                  "src": "946:15:14"
                }
              ]
            },
            "documentation": "@dev Returns a descriptive name for a collection of NFTokens.\n@return Representing name. ",
            "id": 1602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1593,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "879:2:14"
            },
            "returnParameters": {
              "id": 1596,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1595,
                  "name": "_name",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "917:19:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1594,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "917:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "916:21:14"
            },
            "scope": 1672,
            "src": "866:100:14",
            "stateMutability": "view",
            "superFunction": 1142,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1611,
              "nodeType": "Block",
              "src": "1147:30:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1609,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 1607,
                      "name": "_symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1605,
                      "src": "1153:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1608,
                      "name": "nftSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1578,
                      "src": "1163:9:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "1153:19:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_memory_ptr",
                      "typeString": "string memory"
                    }
                  },
                  "id": 1610,
                  "nodeType": "ExpressionStatement",
                  "src": "1153:19:14"
                }
              ]
            },
            "documentation": "@dev Returns an abbreviated name for NFTokens.\n@return Representing symbol. ",
            "id": 1612,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1084:2:14"
            },
            "returnParameters": {
              "id": 1606,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1605,
                  "name": "_symbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 1612,
                  "src": "1122:21:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1604,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1122:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1121:23:14"
            },
            "scope": 1672,
            "src": "1069:108:14",
            "stateMutability": "view",
            "superFunction": 1147,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1626,
              "nodeType": "Block",
              "src": "1446:35:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 1622,
                      "name": "idToUri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1582,
                      "src": "1459:7:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                        "typeString": "mapping(uint256 => string storage ref)"
                      }
                    },
                    "id": 1624,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 1623,
                      "name": "_tokenId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1614,
                      "src": "1467:8:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1459:17:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "functionReturnParameters": 1621,
                  "id": 1625,
                  "nodeType": "Return",
                  "src": "1452:24:14"
                }
              ]
            },
            "documentation": "@dev A distinct URI (RFC 3986) for a given NFT.\n@param _tokenId Id for which we want uri.\n@return URI of _tokenId.",
            "id": 1627,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1617,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1614,
                    "src": "1406:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1618,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1616,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1812,
                  "src": "1393:12:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "1393:22:14"
              }
            ],
            "name": "tokenURI",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1615,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1614,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1627,
                  "src": "1346:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1613,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1346:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1340:26:14"
            },
            "returnParameters": {
              "id": 1621,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1620,
                  "name": "",
                  "nodeType": "VariableDeclaration",
                  "scope": 1627,
                  "src": "1429:13:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1619,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1429:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1428:15:14"
            },
            "scope": 1672,
            "src": "1323:158:14",
            "stateMutability": "view",
            "superFunction": 1154,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1653,
              "nodeType": "Block",
              "src": "1930:123:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1635,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1629,
                        "src": "1948:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1632,
                        "name": "super",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2645,
                        "src": "1936:5:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_super$_NFTokenMetadata_$1672",
                          "typeString": "contract super NFTokenMetadata"
                        }
                      },
                      "id": 1634,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "_burn",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2180,
                      "src": "1936:11:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$returns$__$",
                        "typeString": "function (uint256)"
                      }
                    },
                    "id": 1636,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1936:21:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1637,
                  "nodeType": "ExpressionStatement",
                  "src": "1936:21:14"
                },
                {
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 1645,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1639,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1582,
                              "src": "1974:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1641,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1640,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "1982:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "1974:17:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          ],
                          "id": 1638,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1968:5:14",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                            "typeString": "type(bytes storage pointer)"
                          },
                          "typeName": "bytes"
                        },
                        "id": 1642,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1968:24:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes storage pointer"
                        }
                      },
                      "id": 1643,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1968:31:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 1644,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2003:1:14",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1968:36:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": null,
                  "id": 1652,
                  "nodeType": "IfStatement",
                  "src": "1964:85:14",
                  "trueBody": {
                    "id": 1651,
                    "nodeType": "Block",
                    "src": "2010:39:14",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 1649,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "delete",
                          "prefix": true,
                          "src": "2018:24:14",
                          "subExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1646,
                              "name": "idToUri",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1582,
                              "src": "2025:7:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                                "typeString": "mapping(uint256 => string storage ref)"
                              }
                            },
                            "id": 1648,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 1647,
                              "name": "_tokenId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1629,
                              "src": "2033:8:14",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2025:17:14",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1650,
                        "nodeType": "ExpressionStatement",
                        "src": "2018:24:14"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": "@dev Burns a NFT.\n@notice This is an internal function which should be called from user-implemented external\nburn function. Its purpose is to show and properly initialize data structures when using this\nimplementation. Also, note that this burn implementation allows the minter to re-mint a burned\nNFT.\n@param _tokenId ID of the NFT to be burned.",
            "id": 1654,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1630,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1629,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1654,
                  "src": "1894:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1628,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1894:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1888:26:14"
            },
            "returnParameters": {
              "id": 1631,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1930:0:14"
            },
            "scope": 1672,
            "src": "1874:179:14",
            "stateMutability": "nonpayable",
            "superFunction": 2180,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1670,
              "nodeType": "Block",
              "src": "2552:35:14",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "id": 1664,
                        "name": "idToUri",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1582,
                        "src": "2558:7:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_string_storage_$",
                          "typeString": "mapping(uint256 => string storage ref)"
                        }
                      },
                      "id": 1666,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 1665,
                        "name": "_tokenId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1656,
                        "src": "2566:8:14",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "2558:17:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1667,
                      "name": "_uri",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1658,
                      "src": "2578:4:14",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "2558:24:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 1669,
                  "nodeType": "ExpressionStatement",
                  "src": "2558:24:14"
                }
              ]
            },
            "documentation": "@dev Set a distinct URI (RFC 3986) for a given NFT ID.\n@notice This is an internal function which should be called from user-implemented external\nfunction. Its purpose is to show and properly initialize data structures when using this\nimplementation.\n@param _tokenId Id for which we want uri.\n@param _uri String representing RFC 3986 URI.",
            "id": 1671,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": [
                  {
                    "argumentTypes": null,
                    "id": 1661,
                    "name": "_tokenId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 1656,
                    "src": "2540:8:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                ],
                "id": 1662,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 1660,
                  "name": "validNFToken",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 1812,
                  "src": "2527:12:14",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$_t_uint256_$",
                    "typeString": "modifier (uint256)"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2527:22:14"
              }
            ],
            "name": "_setTokenUri",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1659,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1656,
                  "name": "_tokenId",
                  "nodeType": "VariableDeclaration",
                  "scope": 1671,
                  "src": "2465:16:14",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1655,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2465:7:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1658,
                  "name": "_uri",
                  "nodeType": "VariableDeclaration",
                  "scope": 1671,
                  "src": "2487:18:14",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 1657,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "2487:6:14",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2459:50:14"
            },
            "returnParameters": {
              "id": 1663,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2552:0:14"
            },
            "scope": 1672,
            "src": "2438:149:14",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "internal"
          }
        ],
        "scope": 1673,
        "src": "174:2416:14"
      }
    ],
    "src": "0:2591:14"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.12+commit.7709ece9.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.20",
  "updatedAt": "2020-01-15T03:07:35.985Z",
  "devdoc": {
    "details": "Optional metadata implementation for ERC-721 non-fungible token standard.",
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.",
          "_tokenId": "ID of the token to be approved."
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
        "params": {
          "_owner": "Address for whom to query the balance."
        },
        "return": "Balance of _owner."
      },
      "constructor": {
        "details": "Contract constructor."
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of."
        },
        "return": "Address that _tokenId is approved for. "
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.",
        "params": {
          "_operator": "The address that acts on behalf of the owner.",
          "_owner": "The address that owns the NFTs."
        },
        "return": "True if approved for all, false otherwise."
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.",
        "return": "Representing name. "
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT."
        },
        "return": "Address of _tokenId owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.",
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.",
          "_operator": "Address to add to the set of authorized operators."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.",
        "params": {
          "_interfaceID": "Id of the interface."
        },
        "return": "True if _interfaceID is supported, false otherwise."
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.",
        "return": "Representing symbol. "
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.",
        "params": {
          "_from": "The current owner of the NFT.",
          "_to": "The new owner.",
          "_tokenId": "The NFT to transfer."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
      },
      "constructor": "When implementing this contract don't forget to set nftName and nftSymbol.",
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they maybe be permanently lost."
      }
    }
  }
}